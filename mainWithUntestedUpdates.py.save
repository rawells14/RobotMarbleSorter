#!/usr/bin/env python

import time

motor_path = '/sys/class/tacho-motor/motor'
sensor_path = '/sys/class/lego-sensor/sensor'

class Motor(object):

    def __init__(self, motor_number):
        self.path = motor_path + str(motor_nmber)  

    def move_motor(self, speed):
        file = open(self.path + '/speed_sp', 'w')
        file.write(str(speed))
        file.close()
    
        file = open(self.path + '/command', 'w')
        file.write('run-forever')
        file.close()

    def move_motor_timed(self, speed, time):
        file = open(self.path + '/speed_sp', 'w')
        file.write(str(speed))
        file.close()

        file = open(self.path + '/time_sp', 'w')
        file.write(str(time))
        file.close()

        file = open(self.path + '/command', 'w')
        file.write('run-timed')
        file.close()


    def stop(self):
        file = open(self.path + '/command', 'w')
        file.write('stop')
        file.close()
        
    def move_motor_pos(self, position):
        #FIX ME: need to figure out how to set to move to
        #        relative position to work with the rest of the code
        file = open(self.path + '/position_sp', 'w')
        file.write(str(position))
        file.close

        file = open(self.path + '/stop_action', 'w')
        file.write('hold')
        file.close()

        file = open(self.path + '/command', 'w')
        file.write('run-to-rel-pos')
        file.close()

    def pos(self):
        value = 0;
        with open(self.path + '/position', 'r') as file:
            value = file.readline()
        file.close()
        return value


class Barcode(object):

    def __init__(self, sensor_number, motor_number):
        self.path = sensor_path + str(sensor_number)
        self.motor_number = motor_number

    def poll(self):
        value = 0
        file = open(self.path + '/mode', 'w')
        file.write('COL-COLOR')
        file.close()
        with open(self.path + '/value0', 'r') as file:
            value = file.readline()
        file.close()
        return value

    def read_barcode(self):
        code = []
        i = 0
        barcode_motor = Motor(self.motor_number)
        while i < 100:
            code.append(self.poll)
            code.append(barcode_motor.pos)
            barcode_motor.move_motor_pos(barcode_motor.pos() + 20)
        return code

    def process_code(self, code):
        #FIX ME: need to process data from scan and transform into number and type of marbles

class PelletIdentifier

    def __init__(self, sensor_number):
        self.path = sensor_path + str(sensor_number)
        
    def poll_color(self):
        RGB = []
        file = open(self.path + '/mode', 'w')
        file.write('RGB-RAW')
        file.close()
        for i in {'0', '1', '2'}:
            with open(self.path + '/value' + i, 'r') as file:
                RGB.append(file.readline())
            file.close()
        return RGB




sorter = Motor(0)

    





